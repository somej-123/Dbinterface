<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- log4jdbc 설정전 -->
	<!-- 반드시 네임스페이스에 mybatis-spring 지정함. 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/interface"></property>
		
		<property name="username" value="root"></property>
		<property name="password" value="apmsetup"></property>
	</bean>
	-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" 
				  value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="url" 
				  value="jdbc:log4jdbc:mysql://127.0.0.1:3306/interface"></property>
		<property name="username" value="root"></property>
		<property name="password" value="apmsetup"></property>
		
	</bean>

	<!--
		DataSource 설정으로 JDBC 연결후, MyBatis와 MySql을 연동시킴. 
		SqlSessionFactory : myBatis와 스프링의 Connection 생성.
	 -->		 		
	<bean id="sqlSessionFactory" 
	      class="org.mybatis.spring.SqlSessionFactoryBean">	   
	    <!-- 
	    	JDBC커넥션을 처리하는 DataSource와 mybatis를 연결.
	     -->
	 	<property name="dataSource" ref="dataSource" />
	 	
	 	<!-- 
	 	    root-context.xml :: sqlSessionFactory 에 매퍼 xml 파일의 경로를 인식하게 함. 
	 	 -->
	 	 <property name="mapperLocations" 
		      value="classpath:mappers/**/*Mapper.xml"></property>
	 	
	</bean>
	
	<context:component-scan base-package="org.edu.aop"></context:component-scan>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<aop:config></aop:config>
	<!-- 1. mybatis-spring 을 이용하여 인터페이스로 작성된 Mapper 를 인식시킴.
	      mybatis-spring 의 MapperFactoryBean 를 이용하면 개발자가 직접 DAO 를
	      설정하지 않고도 자동으로 Mapper 인터페이스를 활용하는 개체를 생성할 수 있음.
	<bean id="sampleMapper" 
		  class="org.mybatis.spring.mapper.MapperFactoryBean">
	        <property name="mapperInterface"
	              value="org.joywins.dao.IF_SampleMapper"/>
	        <property name="sqlSessionFactory" value="sqlSessionFactory"/>
	</bean>	      
	<mybatis-spring:scan base-package="org.edu.dao"/>
	      위 1.과 같이 하면 매번 Mapper 인터페이스를 인식시켜야 하므로
	       아래 설정으로 mybatis-spring:scan 은 자동으로 해당 패키지 안에 선언된 
	       인터페이스를 Mapper 로 인식함. 
	 -->
	 <!-- 
		...133, 176p.MyBatis에서 DAO를 이용하는 경우, SqlSessionTemplate라는 것을 이용해서 DAO를 구현함.
		mybatis-spring에서 제공하는 SqlSessionTempalte객체는 기본적인 트랜잭션 관리나 쓰레드 처리의
		안정성등을 보장해주고, 개발자들이 직접 DB 연결, 종료작업하는 것을 줄여줌.
		SqlSessionFactory를 생성자로 주입함.
	 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" 
	 	  destroy-method="clearCache">
	  <constructor-arg name="sqlSessionFactory" 
	    	ref="sqlSessionFactory"></constructor-arg>
	</bean>
	  <context:component-scan base-package="org.edu.dao"></context:component-scan>
	 <context:component-scan base-package="org.edu.service"></context:component-scan>
			
			
</beans>
